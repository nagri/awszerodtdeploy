// Code generated by MockGen. DO NOT EDIT.
// Source: awsec2.go
//
// Generated by this command:
//
//	mockgen --source awsec2.go --destination=mock_awsec2/mock_awsec2.go
//

// Package mock_awsec2 is a generated GoMock package.
package mock_awsec2

import (
	context "context"
	reflect "reflect"

	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	gomock "go.uber.org/mock/gomock"
)

// MockEC2ClientInterface is a mock of EC2ClientInterface interface.
type MockEC2ClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEC2ClientInterfaceMockRecorder
}

// MockEC2ClientInterfaceMockRecorder is the mock recorder for MockEC2ClientInterface.
type MockEC2ClientInterfaceMockRecorder struct {
	mock *MockEC2ClientInterface
}

// NewMockEC2ClientInterface creates a new mock instance.
func NewMockEC2ClientInterface(ctrl *gomock.Controller) *MockEC2ClientInterface {
	mock := &MockEC2ClientInterface{ctrl: ctrl}
	mock.recorder = &MockEC2ClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEC2ClientInterface) EXPECT() *MockEC2ClientInterfaceMockRecorder {
	return m.recorder
}

// CreateLaunchTemplateVersion mocks base method.
func (m *MockEC2ClientInterface) CreateLaunchTemplateVersion(ctx context.Context, params *ec2.CreateLaunchTemplateVersionInput, optFns ...func(*ec2.Options)) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLaunchTemplateVersion", varargs...)
	ret0, _ := ret[0].(*ec2.CreateLaunchTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunchTemplateVersion indicates an expected call of CreateLaunchTemplateVersion.
func (mr *MockEC2ClientInterfaceMockRecorder) CreateLaunchTemplateVersion(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchTemplateVersion", reflect.TypeOf((*MockEC2ClientInterface)(nil).CreateLaunchTemplateVersion), varargs...)
}

// DescribeLaunchTemplates mocks base method.
func (m *MockEC2ClientInterface) DescribeLaunchTemplates(ctx context.Context, params *ec2.DescribeLaunchTemplatesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLaunchTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLaunchTemplates", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeLaunchTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLaunchTemplates indicates an expected call of DescribeLaunchTemplates.
func (mr *MockEC2ClientInterfaceMockRecorder) DescribeLaunchTemplates(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchTemplates", reflect.TypeOf((*MockEC2ClientInterface)(nil).DescribeLaunchTemplates), varargs...)
}

// ModifyLaunchTemplate mocks base method.
func (m *MockEC2ClientInterface) ModifyLaunchTemplate(ctx context.Context, params *ec2.ModifyLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.ModifyLaunchTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyLaunchTemplate", varargs...)
	ret0, _ := ret[0].(*ec2.ModifyLaunchTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyLaunchTemplate indicates an expected call of ModifyLaunchTemplate.
func (mr *MockEC2ClientInterfaceMockRecorder) ModifyLaunchTemplate(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyLaunchTemplate", reflect.TypeOf((*MockEC2ClientInterface)(nil).ModifyLaunchTemplate), varargs...)
}
